/*!
Theme Name: Barebones
Description: A Sass build of the Barebones WordPress base theme.
Author: James Young (@welcomebrand)
Author URI: http://welcomebrand.co.uk;
Version: 1.0
*/
/*

    GLOBAL RESETS
    =============

    Standard reset styles and a few extra bits and pieces including
    setting border-box on all elements.

*/
html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, dialog, figure, footer, header, hgroup, menu, nav, section, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  vertical-align: baseline;
  background: transparent; }
article, aside, dialog, figure, footer, header, hgroup, nav, section {
  display: block; }
nav ul {
  list-style: none; }
blockquote, q {
  quotes: none; }
blockquote:before, blockquote:after, q:before, q:after {
  content: '';
  content: none; }
a {
  margin: 0;
  padding: 0;
  border: 0;
  vertical-align: baseline;
  background: transparent; }
ins, mark {
  background: #333;
  color: #fff;
  text-decoration: none; }
mark {
  display: inline-block;
  padding: .1em;
  text-shadow: none;
  background: #f2d3a9;
  color: #a93901;
  border-radius: 2px; }
del {
  text-decoration: line-through; }
abbr[title], dfn[title] {
  border-bottom: 1px dotted #000;
  cursor: help; }
table {
  border-collapse: collapse;
  border-spacing: 0; }
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0; }
::-moz-selection, ::-webkit-selection, ::-moz-selection {
  text-shadow: none;
  background: #333;
  color: #fff; }
::-moz-selection, ::-webkit-selection, ::selection {
  text-shadow: none;
  background: #333;
  color: #fff; }
.cf:before, .cf:after {
  content: "";
  display: table; }
.cf:after {
  clear: both; }
.cf {
  zoom: 1; }
[type=submit] {
  cursor: pointer; }
* {
  box-sizing: border-box;
  -webkit-text-size-adjust: none;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }
/*

    MIXINS AND VARIABLES
    ====================

    All mixins and variables live here. Where possible, please include
    a source link if they're written by someone else along with an
    indication of how they should be used in the css files.

*/
/* Colour Palette */
/* REM Font sizing - http://blog.divshot.com/post/29552945105/useful-sass-mixins-for-responsive-design-font-sizing */
/* Define Media Queries - http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
/* Hover animation */
/* Gradient */
/* Clearfix http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
/* Visually hide element http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
/* Image floats */
/*
	NOTE: If you use Google fonts, import it here. Don't include the http bit then it's safe across secure too
	@import url(//fonts.googleapis.com/css?family=Paytone+One;
*/
/*
Font weights set as variables because sometimes there are multiple weights,
so an example use might also be a variable of $mid-weight: 500;
If you've just got normal and bold, you don't need the variable.
*/
html {
  font-size: 100%; }
body {
  font-size: 16px;
  line-height: 24px;
  font-size: 1rem;
  line-height: 1.5rem; }
h1, h2, h3, h4, h5, h6 {
  font-size: 24px;
  line-height: 28px;
  font-size: 1.5rem;
  line-height: 1.75rem; }
a {
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s; }
a:hover, a:active {
    outline: 0; }
a:focus {
  outline: thin dotted; }
strong, b {
  font-weight: bold; }
.small {
  font-size: 12px;
  line-height: 20px;
  font-size: 0.75rem;
  line-height: 1.25rem; }
pre, code {
  font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal; }
/*

    GENEAL FORM STUFF
    =================

    This is more reset based stuff, if you've got a specific form, it would be
    best to create it as a partial scss file and import it to screen.scss

*/
form {
  margin: 0; }
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }
legend {
  border: 0;
  padding: 0;
  white-space: normal;
  *margin-left: -7px; }
button,
input,
select,
textarea {
  font-size: 100%;
  margin: 0;
  vertical-align: baseline;
  *vertical-align: middle; }
button,
input {
  line-height: normal; }
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
  *overflow: visible; }
button[disabled],
input[disabled] {
  cursor: default; }
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
  *height: 13px;
  *width: 13px; }
input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box; }
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }
textarea {
  overflow: auto;
  vertical-align: top;
  resize: vertical; }
/*

    SITEWIDE LAYOUT ELEMENTS
    ========================

    Top level layout elements go in here, if you're building a module or page
    element of some sort, split it out into its own scss file and update
    styles.scss to import it.

*/
body {
  padding: 0;
  margin: 0 auto;
  width: 100%; }
ul, ol {
  margin: 0 0 1.5em 1.5em; }
li > ul,
li > ol {
  margin-bottom: 0; }
img,
a img {
  -ms-interpolation-mode: bicubic;
  max-width: 100%;
  min-height: auto;
  vertical-align: middle; }

/*# sourceMappingURL=data:application/json;base64, */
